"""
/***************************************************************************
 SegmentationPlugin
                                 A QGIS plugin
 SegmentationPlugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-05-27
        copyright            : (C) 2025 by SegmentationPlugin
        email                : SegmentationPlugin
        git sha              : $Format:%H$
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
 This script initializes the plugin, making it known to QGIS.
"""

import os
import subprocess
import sys
import time

# Проверка и создание окружения при первом запуске
def check_and_create_environment():
    """Проверяет наличие окружения и создает его при необходимости"""
    plugin_dir = os.path.dirname(__file__)
    venv_path = os.path.join(plugin_dir, '.venv')
    portable_python_path = os.path.join(plugin_dir, 'portable_python')
    create_env_script = os.path.join(plugin_dir, 'create_env.bat')
    
    # Проверяем, есть ли хотя бы одна из папок с правильной структурой
    venv_exists = os.path.exists(venv_path) and os.path.exists(os.path.join(venv_path, 'Scripts', 'python.exe'))
    portable_exists = os.path.exists(portable_python_path) and os.path.exists(os.path.join(portable_python_path, 'python.exe'))
    
    if venv_exists or portable_exists:
        return True
    
    # Проверяем наличие скрипта создания окружения
    if not os.path.exists(create_env_script):
        from qgis.PyQt.QtWidgets import QMessageBox
        QMessageBox.critical(
            None,
            "Ошибка инициализации",
            f"Не найден скрипт создания окружения: {create_env_script}\n"
            "Пожалуйста, убедитесь, что файл create_env.bat находится в папке плагина."
        )
        return False
    
    # Только для Windows
    if os.name != 'nt':
        from qgis.PyQt.QtWidgets import QMessageBox
        QMessageBox.warning(
            None,
            "Предупреждение",
            "Автоматическая установка окружения доступна только для Windows.\n"
            "Пожалуйста, создайте виртуальное окружение вручную."
        )
        return False
    
    # Показываем диалог с информацией
    from qgis.PyQt.QtWidgets import QMessageBox, QProgressDialog
    from qgis.PyQt.QtCore import Qt, QTimer
    
    reply = QMessageBox.information(
        None,
        "Первый запуск",
        "Это первый запуск плагина Segmentation.\n"
        "Необходимо создать виртуальное окружение и установить зависимости.\n"
        "Это может занять несколько минут.\n\n"
        "ВАЖНО: Будет открыто окно командной строки.\n"
        "НЕ ЗАКРЫВАЙТЕ его до завершения установки!\n\n"
        "Продолжить установку?",
        QMessageBox.Yes | QMessageBox.No,
        QMessageBox.Yes
    )
    
    if reply != QMessageBox.Yes:
        return False
    
    # Создаем прогресс диалог
    progress = QProgressDialog(
        "Установка компонентов плагина...\n"
        "НЕ ЗАКРЫВАЙТЕ окно командной строки!\n"
        "Дождитесь автоматического закрытия этого окна.",
        None,  # Без кнопки отмены
        0, 0  # Неопределенный прогресс
    )
    progress.setWindowTitle("Установка Segmentation Plugin")
    progress.setWindowModality(Qt.WindowModal)
    progress.setMinimumDuration(0)
    progress.show()
    
    # Обновляем UI
    from qgis.PyQt.QtWidgets import QApplication
    QApplication.processEvents()
    
    try:
        # Запускаем BAT файл через os.startfile (открывает в новом окне)
        os.startfile(create_env_script)
        
        # Создаем таймер для проверки завершения
        timer = QTimer()
        check_count = 0
        max_checks = 1200  # 20 минут максимум (1200 * 1 секунда)
        
        def check_installation():
            nonlocal check_count
            check_count += 1
            
            # Обновляем текст прогресса каждые 5 секунд
            if check_count % 5 == 0:
                progress.setLabelText(
                    f"Установка компонентов плагина...\n"
                    f"НЕ ЗАКРЫВАЙТЕ окно командной строки!\n"
                    f"Прошло времени: {check_count} сек."
                )
            
            # Проверяем создание файлов
            venv_python = os.path.join(venv_path, 'Scripts', 'python.exe')
            
            # Проверяем, что установка завершена
            if os.path.exists(venv_python):
                # Дополнительная проверка - есть ли pip
                venv_pip = os.path.join(venv_path, 'Scripts', 'pip.exe')
                if os.path.exists(venv_pip):
                    # Проверяем, что requirements установлены
                    # Проверяем наличие ключевых пакетов
                    site_packages = os.path.join(venv_path, 'Lib', 'site-packages')
                    key_packages = ['tensorflow', 'numpy', 'cv2', 'segmentation_models']
                    
                    all_installed = True
                    for package in key_packages:
                        # Для opencv-python проверяем cv2
                        if package == 'cv2':
                            package_path = os.path.join(site_packages, package)
                            if not os.path.exists(package_path):
                                all_installed = False
                                break
                        else:
                            package_paths = [
                                os.path.join(site_packages, package),
                                os.path.join(site_packages, package.replace('-', '_')),
                                os.path.join(site_packages, package.replace('_', '-'))
                            ]
                            if not any(os.path.exists(p) for p in package_paths):
                                all_installed = False
                                break
                    
                    if all_installed:
                        # Установка завершена успешно
                        timer.stop()
                        progress.close()
                        
                        QMessageBox.information(
                            None,
                            "Установка завершена",
                            "Виртуальное окружение успешно создано!\n"
                            "Все зависимости установлены.\n"
                            "Плагин готов к использованию."
                        )
                        return
            
            # Проверяем таймаут
            if check_count >= max_checks:
                timer.stop()
                progress.close()
                
                QMessageBox.warning(
                    None,
                    "Превышено время ожидания",
                    "Установка занимает слишком много времени.\n"
                    "Проверьте окно командной строки.\n\n"
                    "Если установка завершилась успешно, перезапустите QGIS.\n"
                    "Если есть ошибки, попробуйте запустить create_env.bat вручную."
                )
                return
            
            QApplication.processEvents()
        
        # Запускаем проверку каждую секунду
        timer.timeout.connect(check_installation)
        timer.start(1000)  # Каждую секунду
        
        # Входим в цикл обработки событий
        while timer.isActive():
            QApplication.processEvents()
            time.sleep(0.1)
        
        # Финальная проверка
        venv_python = os.path.join(venv_path, 'Scripts', 'python.exe')
        if os.path.exists(venv_python):
            return True
        else:
            return False
        
    except Exception as e:
        if 'progress' in locals():
            progress.close()
        if 'timer' in locals() and timer.isActive():
            timer.stop()
        
        QMessageBox.critical(
            None,
            "Ошибка установки",
            f"Произошла ошибка при создании окружения:\n{str(e)}\n\n"
            f"Попробуйте запустить create_env.bat вручную из папки плагина."
        )
        return False


# noinspection PyPep8Naming
def classFactory(iface):  # pylint: disable=invalid-name
    """Load SegmentationPlugin class from file SegmentationPlugin.

    :param iface: A QGIS interface instance.
    :type iface: QgsInterface
    """
    # Проверяем и создаем окружение при необходимости
    if not check_and_create_environment():
        # Возвращаем заглушку, если не удалось создать окружение
        class DummyPlugin:
            def __init__(self, iface):
                self.iface = iface
            def initGui(self):
                from qgis.PyQt.QtWidgets import QMessageBox
                QMessageBox.warning(
                    None,
                    "Segmentation Plugin",
                    "Плагин не может быть загружен, так как не установлено окружение.\n"
                    "Пожалуйста, перезапустите QGIS и попробуйте снова."
                )
            def unload(self):
                pass
        return DummyPlugin(iface)
    
    # Импортируем основной класс плагина только после создания окружения
    from .SegmentationPlugin import SegmentationPlugin
    return SegmentationPlugin(iface)
